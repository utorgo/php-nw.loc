Домашнее задание к 1 уроку
1. Добейтесь корректной работы вашего сервера. Тщательно повторите шаги, которые мы делали на уроке. В случае затруднений - обращайтесь в чат поддержки!
2. Добавьте себе в закладки официальный мануал по языку http://fi2.php.net/manual/ru/
3. В PHP есть функция var_dump($something), которая выводит подробную информацию о значениях и их типах. Попробуйте написать что-нибудь вроде var_dump(2*2); чтобы увидеть, как она работает. Изучите с помощью этой функции следующие выражения:
1. 3 / 1
2. 1 / 3
3. '20cats' + 40
4. 18 % 4 (прочтите главу http://fi2.php.net/manual/ru/language.operators.arithmetic.php чтобы узнать, что это такое)
4. Говорят, что в PHP "всё является выражением". Интересно, что даже присваивание переменной какого-либо значения тоже является выражением! Изучите примеры ниже и дайте ответ - что же является значением выражения присваивания?
1. echo ($a = 2);
2. $x = ($y = 12) - 8; echo $x;
5. В PHP имеется логический (boolean) тип, имеющий два значения - true (истина) и false (ложь). Изучите с помощью var_dump() следующие выражения и объясните их (прочитайте предварительно http://fi2.php.net/manual/ru/language.operators.comparison.php ):
1. 1 == 1.0
2. 1 === 1.0
3. '02' == 2
4. '02' === 2
5. '02' == '2'
Домашнее задание ко 2 уроку
1. Напишите программу, которая составит и выведет в браузер таблицу истинности ( https://ru.wikipedia.org/wiki/%D0%A2%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D0%B0_%D0%B8%D1%81%D1%82%D0%B8%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8 ) для логических операторов &&, || и xor.
2. Составьте функцию вычисления дискриминанта квадратного уравнения. Покройте ее тестами. Используя эту функцию, напишите программу, которая решает квадратное уравнение. Оформите красивый вывод решения.
3. Проведите самостоятельное исследование на тему "Что возвращает оператор include, если его использовать как функцию?". Используйте руководство по языку, составьте и приложите примеры, иллюстрирующие ваше исследование.
4. * Составьте функцию, которая на вход будет принимать имя человека, а возвращать его пол, пытаясь угадать по имени (null - если угадать не удалось). Вам придется самостоятельно найти нужные вам строковые функции. Начните с написания тестов для функции. 

Домашнее задание к 3 уроку
1. Напишите программу-калькулятор
1. Форма для ввода двух чисел, выбора знака операции и кнопка "равно"
2. Данные пусть передаются методом GET из формы (да, можно и так!) на скрипт, который их примет и выведет выражение и его результат
3. * Попробуйте улучшить программу. Пусть данные отправляются на ту же страницу на PHP, введенные числа останутся в input-ах, а результат появится после кнопки "равно"
2. Создайте примитивную фотогалерею из двух страниц
1. Пусть на главной странице галереи выводятся 3-4 изображения
2. Каждое из них пусть будет ссылкой вида /image.php?id=42, где 42 - условный номер изображения
3. На странице image.php вы по номеру понимаете, какое изображение вывести в браузер и выводите его. Я ожидаю, что для этого пункта программы вы создатите массив вида [1 => 'cat.jpg', 2=>'dog.jpg', ... ], однако вы можете предложить и другое решение

Домашнее задание к 4 уроку
Пишем игру в города!
1. Создайте "базу" городов. Это, конечно же, массив с названиями городов, который вам придется заполнить вручную
2. Напишите функцию (и тест для нее), которая по первой букве названия города вёрнет из этого массива первое встреченное название
3. Напишите скрипт, который примет из формы введенное пользователем название города, определит у него последнюю букву и, применив функцию из пункта 2, "сделает ход" - напечатает название города, который начинается на эту букву

Домашнее задание к 5 уроку
1. Делаем гостевую книгу. Алгоритм:
1. Создайте текстовый файл, в котором будут находиться записи гостевой. Одна строка - одна запись. Заполните файл 2-3 записями.
2. Напишите функцию, которая будет читать этот файл и возвращать массив записей гостевой книги
3. Сделайте страницу, где гостевая книга будет отображаться. Используйте функцию из пункта 2
4. В конце страницы сделайте форму для добавления новой записи в гостевую книгу.
5. Скрипт-обработчик, приняв данные из формы пункта 4, должен получить массив уже имеющихся записей гостевой, добавить к этому массиву новый элемент (текст из формы) и записать полученный массив в тот же файл, разделяя элементы символом переноса строки
6. * После окончания своей работы скрипт из пункта 5 должен перенаправить клиента на главную страницу гостевой книги
2. Решите задачу загрузки файла от пользователя в заданное место на сервере с тем же именем файла, что он имел на компьютере пользователя. 
3. * Решите задачу ограничения загрузки, например - только файлов JPEG и PNG

Домашнее задание к 6 уроку
Модифицируем предыдущее домашнее задание в соответствии с новыми знаниями:
1. Создайте класс GuestBook, который будет удовлетворять следующим требованиям:
1. В конструктор передается путь до файла с данными гостевой книги, в нём же происходит чтение данных из ней (используйте защищенное свойство объекта для хранения данных)
2. Метод getData() возвращает массив записей гостевой книги
3. Метод append($text) добавляет новую запись к массиву записей
4. Метод save() сохраняет массив в файл
2. * Продумайте - какие части функционала можно вынести в базовый (родительский) класс TextFile, а какие - сделать в унаследованном от него классе GuestBook
3. Создайте класс Uploader в соответствии с требованиями:
1. В конструктор передается имя поля формы, от которого мы ожидаем загрузку файла
2. Метод isUploaded() проверяет - был ли загружен файл от данного имени поля
3. Метод upload() осуществляет перенос файла (если он был загружен!) из временного места в постоянное
4. * Попробуйте в некоторые методы заканчивать конструкцией return $this; и придумайте этому применение

Домашнее задание к 7 уроку
1. Создайте объект класса View, удовлетворяющий следующим требованиям:
1. Конструктор не имеет аргументов
2. Есть метод assign($name, $value), чья задача - сохранить данные, передаваемые в шаблон по заданному имени (используйте защищенное свойство - массив для хранения этих данных)
3. Есть метод display($template), который отображает указанный шаблон с заранее сохраненными данными
4. * Метод render($template), который аналогичен методу display(), но не выводит шаблон с данными в браузер, а возвращает его
2. Перепишите предыдущее ДЗ, используя ВЕЗДЕ объекты класса View для отображения страниц сайта
3. Создайте на своем учебном сайте раздел "Новости". Для этого:
1. Создайте класс Article - модель одной новости
2. Создайте класс News - модель хранилища новостей (аналогично гостевой книге в предыдущем ДЗ и на уроке)
3. Две страницы сайта
1. news.php - отображает список всех новостей. Заголовок у каждой - ссылка на страницу этой новости, под заголовком - краткий текст
2. article.php?id=NNN - отображает новость номер NNN с полным текстом
4. При выполнении задачи 3. весь код должен быть в классах. Используйте при необходимости тайп-хинтинг. Весь вывод - через ранее созданный объект View.

Домашнее задание к 8 уроку
Делаем с нуля веб-приложение, использующее базу данных
1. Создайте класс DB
1. В конструкторе устанавливается и сохраняется соединение с базой данных. Параметры соединения берем из файла конфига
2. Метод execute(string $sql) выполняет запрос и возвращает true либо false в зависимости от того, удалось ли выполнение
3. Метод query(string $sql, array $data) выполняет запрос, подставляет в него данные $data, возвращает данные результата запроса либо false, если выполнение не удалось
2. Создайте таблицу news с полями "заголовок", "текст", "автор". Заполните ее 3-5 новостями. Запишите запросы на языке SQL, которые вы использовали и приложите к своему ДЗ
3. Создайте две страницы сайта, используя технику шаблонов и класс View из предыдущего ДЗ:
1. index.php выводит все новости (самая новая - наверху)
2. article.php?id=N выводит одну новость, с id=N

Домашнее задание к 9 уроку
Используя в своем проекте изученный шаблон MVC, создайте полноценное веб-приложение (сайт), выбрав один из трех указанных ниже проектов. 
Важные требования к приложению, независимо от выбранного проекта:
* MVC
* Законченный внешний вид
* Использование базы данных
Проекты на выбор:
* Персональный сайт
o Разделы: обо мне, фотогалерея, гостевая книга
o Админ-панель: возможность смены текста "обо мне", добавления фотографий, удаления записей из гостевой книги
* Сайт о любимом музыкальном исполнителе
o Разделы: фотогалерея, список альбомов по годам
o Админ-панель: возможность добавления фотографий, альбомов
* Сайт о вашем городе
o Разделы: заглавная страница с приветственным текстом, фотогалерея, расписание поездов дальнего следования 
o Админ-панель: возможность редактирования текста, добавления фото в галерею, редактирования расписания поездов
